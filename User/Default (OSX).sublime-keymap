[
	/* NAVIGATION */

	// side bar navigation
	{ "keys": ["ctrl+super+w"], "command": "focus_side_bar" },

	// tab navigation
	{ "keys": ["ctrl+super+alt+left"], "command": "focus_neighboring_group", "args": {"forward": false} },
	{ "keys": ["ctrl+super+alt+right"], "command": "focus_neighboring_group" },

	// move by paragraph
	{ "keys": ["alt+up"], "command": "move", "args": {"by": "stops", "empty_line": true, "forward": false} },
	{ "keys": ["alt+down"], "command": "move", "args": {"by": "stops", "empty_line": true, "forward": true} },
	
	// open Default settings
	{ "keys": ["ctrl+super+,"], "command": "open_file", "args": {"file": "${packages}/Default/Preferences.sublime-settings"} },

	// open Default bindings
	{ "keys": ["ctrl+super+alt+k"], "command": "open_file", "args": {"file": "${packages}/Default/Default ($platform).sublime-keymap"} },
	{ "keys": ["ctrl+super+alt+m"], "command": "open_file", "args": {"file": "${packages}/Default/Default ($platform).sublime-mousemap"} },

	// open User bindings
	{ "keys": ["super+alt+m"], "command": "open_file", "args": {"file": "${packages}/User/Default ($platform).sublime-mousemap", "contents": "[\n\t$0\n]\n"} },
	{ "keys": ["super+alt+k"], "command": "open_file", "args": {"file": "${packages}/User/Default ($platform).sublime-keymap"} },
	
	// open new tab
	{ "keys": ["super+t"], "command": "new_file" },

	// open console
	{ "keys": ["ctrl+super+c"], "command": "show_panel", "args": {"panel": "console", "toggle": true} },

	/* SELECTION */
	
	{ "keys": ["super+shift+a"], "command": "expand_region" },
	{ "keys": ["super+u"], "command": "expand_region", "args": {"undo": true}, "context": [{ "key": "expand_region_soft_undo" }] },
	
	/* TEXT EDIT */

	// swap the keybindings for paste and paste_and_indent
	{ "keys": ["super+v"], "command": "paste_and_indent" },
	{ "keys": ["super+shift+v"], "command": "paste" },
	
	// alternative shortcuts for comments
	{ "keys": ["super+:"], "command": "toggle_comment", "args": { "block": false } },
	{ "keys": ["super+shift+:"], "command": "toggle_comment", "args": { "block": true } },
	{ "keys": ["super+shift+c"], "command": "toggle_comment", "args": { "block": false } },
	{ "keys": ["ctrl+c"], "command": "run_macro_file", "args": {"file": "res://Packages/User/Toggle Comment Pass Line.sublime-macro"},
		// for old shortcut super+alt+c
		// exclude search context, where super+alt+c is used to toggle case sensitiveness
		// "context":
		// 	[
		// 		{ "key": "setting.is_widget", "operator": "equal", "operand": false }
		// 	]
	},

	// shortcut for soft deletes (left until indentation excluded and right until EOL excluded)
	{ "keys": ["shift+backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete to BOL.sublime-macro"} },
	{ "keys": ["shift+delete"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete to EOL.sublime-macro"} },

	// delete subwords
	// { "keys": ["alt+backspace"], "command": "run_macro_file", "args": {"file": "Packages/User/Delete Subword.sublime-macro"} },
	// { "keys": ["alt+delete"], "command": "run_macro_file", "args": {"file": "Packages/User/Delete Subword Forward.sublime-macro"} },

	// delete line
	{ "keys": ["super+shift+k"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Line.sublime-macro"} },
	{ "keys": ["ctrl+e"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Line.sublime-macro"} },

	// alternative shortcut for duplicate line
	{ "keys": ["ctrl+d"], "command": "duplicate_line" },

	// caml case (overrides Convert Case > Upper Case)
	{ "keys": ["super+k", "super+u"], "command": "title_case" },

	// replace line with clipboard content
	{ "keys": ["super+ctrl+v"], "command": "run_macro_file", "args": {"file": "res://Packages/User/Delete Line and Paste.sublime-macro"} },

	// add semicolumn at the end of line and newline
	{ "keys": ["ctrl+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/User/Add Semicolumn and Line.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": ["source.cs", "source.cpp"] },
		]
	},

	// remove surrounding (external) matching brackets (uses BracketHighlighter) when deleting one of them while holding ctrl
	// can do the same for [], {}, '', ""
	// backspace works for opening bracket only
	{ "keys": ["ctrl+backspace"], "command": "bh_key",
		"args":
		{
			"plugin":
			{
				"type": ["__all__"],
				"command": "bh_modules.bracketremove",  // same command to remove (), [], {}, '', "", depending on context
				"args":
				{
					"remove_indent": false,
					"remove_block": false,
					"remove_content": false
				}
			}
		}, "context":
		[
	        { "key": "preceding_text", "operator": "regex_contains", "operand": "[([{'\"]$", "match_all": true }
		]
	},
	// delete works for closing bracket only
	{ "keys": ["ctrl+delete"], "command": "bh_key",
		"args":
		{
			"plugin":
			{
				"type": ["__all__"],
				"command": "bh_modules.bracketremove",
				"args":
				{
					"remove_indent": false,
					"remove_block": false,
					"remove_content": false
				}
			}
		}, "context":
		[
	        { "key": "following_text", "operator": "regex_contains", "operand": "^[([{'\"]", "match_all": true },
		]
	},

	/* experimental */

	// Auto-pair brackets surrounding following word
	{ "keys": ["super+("], "command": "run_macro_file", "args": {"file": "res://Packages/User/Wrap Following Expression.sublime-macro"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			// { "key": "following_text", "operator": "regex_contains", "operand": "^\\w", "match_all": true }
		]
	},

	// { "keys": [")"], "command": "insert", "args": {"characters": ")"}, "context":
	//     [
	//         { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
	//         { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
	//         { "key": "following_text", "operator": "regex_contains", "operand": "^\\)", "match_all": true },
	//         { "key": "preceding_text", "operator": "regex_contains", "operand": "[^(]$", "match_all": true }
	//     ]
	// },
	// { "keys": [")"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
	//     [
	//         { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
	//         { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
	//         { "key": "following_text", "operator": "regex_contains", "operand": "^\\)", "match_all": true },
	//         { "key": "preceding_text", "operator": "regex_contains", "operand": "\\($", "match_all": true }
	//     ]
	// },

	/* PALETTE */

	// build
	{ "keys": ["super+alt+b"], "command": "show_overlay", "args": {"overlay": "command_palette", "text": "Build: "} },

	// snippet
	{ "keys": ["super+ctrl+s"], "command": "show_overlay", "args": {"overlay": "command_palette", "text": "Snippet: "} },

	/* CONSOLE */

	// stop current build / run
	{ "keys": ["super+alt+c"], "command": "exec", "args": {"kill": true} },

	/* PACKAGE command shortcuts */

	// Origami //

	// Overrides Delete until OEF
	{ "keys": ["super+k", "super+k"], "command": "destroy_pane", "args": {"direction": "self"} },

	// MoveTab //

	// Move to first/last position shortcuts
	{
		"keys": ["super+alt+shift+down"],
		"command": "move_tab",
		"args": { "position": "999" }
	},
	{
		"keys": ["super+alt+shift+up"],
		"command": "move_tab",
		"args": { "position": "0" }
	},

	// GoToLastEditEnhanced //

	// These are the original shortcuts, but useful to override identical OmniSharp shortcuts
	// We could also comment the shortcuts in the OmniSharp package (it is not compressed)
	{
	  "keys": ["alt+z"],
	  "command": "goto_last_edit_enhanced",
	  "context": [
	    {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
	  ]
	},

	{
	  "keys": ["alt+shift+z"],
	  "command": "goto_last_edit_enhanced",
	  "args": {
	    "backward": true
	  },
	  "context": [
	    {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
	  ]
	}
]
